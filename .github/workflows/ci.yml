name: Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-linux:
    name: Linux Build (Clang Debug)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y python3 python3-pip clang cmake \
                              libgl1-mesa-dev libx11-dev libxrandr-dev \
                              libxinerama-dev libxcursor-dev libxi-dev \
                              libx11-xcb-dev libfontenc-dev libice-dev \
                              libsm-dev libxau-dev libxaw7-dev libxcomposite-dev \
                              libxdamage-dev libxkbfile-dev libxmu-dev libxmuu-dev \
                              libxpm-dev libxres-dev libxss-dev libxt-dev libxtst-dev \
                              libxv-dev libxxf86vm-dev libxcb-glx0-dev libxcb-render0-dev \
                              libxcb-render-util0-dev libxcb-xkb-dev libxcb-icccm4-dev \
                              libxcb-image0-dev libxcb-keysyms1-dev libxcb-randr0-dev \
                              libxcb-shape0-dev libxcb-sync-dev libxcb-xfixes0-dev \
                              libxcb-xinerama0-dev libxcb-dri3-dev uuid-dev \
                              libxcb-cursor-dev libxcb-dri2-0-dev libxcb-present-dev \
                              libxcb-composite0-dev libxcb-ewmh-dev libxcb-res0-dev
          python3 -m venv .venv
          source .venv/bin/activate
          pip install conan

      - name: Setup Conan default profile
        run: |
          source .venv/bin/activate
          conan profile detect --force

      - name: Cache Conan packages
        uses: actions/cache@v4
        with:
          path: ~/.conan2
          key: ${{ runner.os }}-conan-${{ hashFiles('**/conanfile.*') }}

      - name: Build project (clang-debug)
        run: |
          chmod +x ./build.sh
          ./build.sh clang-debug

      - name: Verify build output
        run: |
          if [ -f ./build/bin/your_game_binary ]; then
            echo "✅ Build succeeded!"
          else
            echo "❌ Build failed!"
            exit 1
          fi

  build-macos:
    name: macOS Build (Clang Debug)
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          brew install python3 cmake llvm
          python3 -m venv .venv
          source .venv/bin/activate
          pip install conan

      - name: Setup Conan default profile
        run: |
          source .venv/bin/activate
          conan profile detect --force

      - name: Cache Conan packages
        uses: actions/cache@v4
        with:
          path: ~/.conan2
          key: ${{ runner.os }}-conan-${{ hashFiles('**/conanfile.*') }}

      - name: Patch profile to use libc++
        run: |
          source .venv/bin/activate
          conan config install .conan
          conan profile update conf.tools.build:compiler_executables="{'cxx':'/usr/bin/clang++','cc':'/usr/bin/clang'}" default
          conan profile update settings.compiler.libcxx=libc++ default

      - name: Build project (clang-debug)
        run: |
          chmod +x ./build.sh
          ./build.sh clang-debug

      - name: Verify build output
        run: |
          if [ -f ./build/bin/your_game_binary ]; then
            echo "✅ Build succeeded!"
          else
            echo "❌ Build failed!"
            exit 1
          fi

  build-windows:
    name: Windows Build (Clang Debug)
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        shell: bash
        run: |
          choco install llvm cmake python --pre
          python -m venv .venv
          source .venv/Scripts/activate || source .venv/bin/activate
          pip install conan

      - name: Setup Conan default profile
        shell: bash
        run: |
          source .venv/Scripts/activate || source .venv/bin/activate
          conan profile detect --force

      - name: Patch profile to use clang
        shell: bash
        run: |
          source .venv/Scripts/activate || source .venv/bin/activate
          conan config install .conan || true
          conan profile update conf.tools.build:compiler_executables="{'cxx':'clang++','cc':'clang'}" default

      - name: Cache Conan packages
        uses: actions/cache@v4
        with:
          path: ~/.conan2
          key: ${{ runner.os }}-conan-${{ hashFiles('**/conanfile.*') }}

      - name: Build project (clang-debug)
        shell: bash
        run: |
          chmod +x ./build.sh
          ./build.sh clang-debug

      - name: Verify build output
        shell: bash
        run: |
          if [ -f ./build/bin/your_game_binary ]; then
            echo "✅ Build succeeded!"
          else
            echo "❌ Build failed!"
            exit 1
          fi

