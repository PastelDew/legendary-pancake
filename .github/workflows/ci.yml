name: Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-linux:
    name: Linux Build (Clang Debug)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y python3 python3-pip clang cmake \
                              libgl1-mesa-dev libx11-dev libxrandr-dev \
                              libxinerama-dev libxcursor-dev libxi-dev
          python3 -m venv .venv
          source .venv/bin/activate
          pip install conan

      - name: Setup Conan default profile
        run: |
          source .venv/bin/activate
          conan profile detect --force

      - name: Cache Conan packages
        uses: actions/cache@v4
        with:
          path: ~/.conan2
          key: ${{ runner.os }}-conan-${{ hashFiles('**/conanfile.*') }}

      - name: Build project (clang-debug)
        run: |
          chmod +x ./build.sh
          ./build.sh clang-debug

      - name: Verify build output
        run: |
          if [ -f ./build/bin/your_game_binary ]; then
            echo "✅ Build succeeded!"
          else
            echo "❌ Build failed!"
            exit 1
          fi

  build-macos:
    name: macOS Build (Clang Debug)
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          brew install python3 cmake llvm
          python3 -m venv .venv
          source .venv/bin/activate
          pip install conan

      - name: Setup Conan default profile
        run: |
          source .venv/bin/activate
          conan profile detect --force

      - name: Cache Conan packages
        uses: actions/cache@v4
        with:
          path: ~/.conan2
          key: ${{ runner.os }}-conan-${{ hashFiles('**/conanfile.*') }}

      - name: Build project (clang-debug)
        run: |
          chmod +x ./build.sh
          ./build.sh clang-debug

      - name: Verify build output
        run: |
          if [ -f ./build/bin/your_game_binary ]; then
            echo "✅ Build succeeded!"
          else
            echo "❌ Build failed!"
            exit 1
          fi

  build-windows:
    name: Windows Build (Clang Debug)
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        shell: bash
        run: |
          choco install llvm cmake python --pre
          python -m venv .venv
          source .venv/Scripts/activate
          pip install conan

      - name: Setup Conan default profile
        shell: bash
        run: |
          source .venv/Scripts/activate
          conan profile detect --force

      - name: Cache Conan packages
        uses: actions/cache@v4
        with:
          path: ~/.conan2
          key: ${{ runner.os }}-conan-${{ hashFiles('**/conanfile.*') }}

      - name: Build project (clang-debug)
        shell: bash
        run: |
          chmod +x ./build.sh
          ./build.sh clang-debug

      - name: Verify build output
        shell: bash
        run: |
          if [ -f ./build/bin/your_game_binary ]; then
            echo "✅ Build succeeded!"
          else
            echo "❌ Build failed!"
            exit 1
          fi
